{"version":3,"sources":["hooks.ts","store/tasksSlice.ts","components/UserTask/styles.ts","components/Comments/styles.ts","components/Comments/index.tsx","components/UserTask/index.tsx","components/Tasks/styles.ts","components/Tasks/index.tsx","components/AddDialog/styles.ts","components/AddDialog/index.tsx","components/App/index.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","tasks","id","task","date","Date","toLocaleDateString","closed","priority","comments","finished","tasksSlice","createSlice","name","reducers","addTask","state","action","Object","keys","length","toString","payload","removeTask","toggleTask","new_task","assign","addComment","concat","comment","setFinished","actions","getTasksIds","sort","a","b","getTasks","useStyles","makeStyles","minWidth","display","flexDirection","alignItems","text","btn","marginRight","row","background","red","avatar","backgroundColor","blue","color","leave_comment","width","list","position","left","item","fontSize","padding","flexGrow","Comments","useState","value","setValue","show","setShow","classes","dispatch","List","className","map","i","ListItem","ListItemAvatar","Avatar","ListItemText","secondary","TextField","autoFocus","margin","label","type","onChange","e","target","Button","onClick","disabled","variant","size","style","marginLeft","UserTask","Box","bgcolor","IconButton","primary","marginTop","overflow","maxHeight","Tasks","marginBottom","SimpleDialog","props","onClose","open","prt","setPriority","Dialog","aria-labelledby","DialogTitle","FormControl","InputLabel","Select","labelId","MenuItem","AddDialog","React","setOpen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","tasksReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d890143f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store/store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"./store\";\r\nimport { Task } from \"../Props\";\r\n\r\ntype TasksState = {\r\n  tasks: {\r\n    [key: string]: Task;\r\n  };\r\n};\r\n\r\n// Define the initial state using that type\r\nconst initialState: TasksState = {\r\n  tasks: {\r\n    \"0\": {\r\n      id: \"0\",\r\n      task: \"Read book\",\r\n      date: new Date().toLocaleDateString(),\r\n      closed: false,\r\n      priority: 1,\r\n      comments: [\"Это тестовый комментарий\"],\r\n      finished: false,\r\n    },\r\n  },\r\n};\r\n\r\nexport const tasksSlice = createSlice({\r\n  name: \"tasks_slice\",\r\n  initialState,\r\n  reducers: {\r\n    addTask: (\r\n      state,\r\n      action: PayloadAction<{ task: string; priority: number }>\r\n    ) => {\r\n      state.tasks[Object.keys(state.tasks).length] = {\r\n        id: Object.keys(state.tasks).length.toString(),\r\n        task: action.payload.task,\r\n        date: new Date().toLocaleDateString(),\r\n        comments: [],\r\n        closed: false,\r\n        priority: action.payload.priority,\r\n        finished: false,\r\n      };\r\n    },\r\n    removeTask: (state, action: PayloadAction<string>) => {\r\n      delete state.tasks[action.payload];\r\n    },\r\n    toggleTask: (state, action: PayloadAction<string>) => {\r\n      const task = state.tasks[action.payload];\r\n      const new_task = Object.assign({}, task, { closed: !task.closed });\r\n      state.tasks[action.payload] = new_task;\r\n    },\r\n    addComment: (\r\n      state,\r\n      action: PayloadAction<{ id: string; comment: string }>\r\n    ) => {\r\n      const task = state.tasks[action.payload.id];\r\n      const new_task = Object.assign({}, task, {\r\n        comments: task.comments.concat([action.payload.comment]),\r\n      });\r\n      state.tasks[action.payload.id] = new_task;\r\n    },\r\n    setFinished: (state, action: PayloadAction<string>) => {\r\n      const task = state.tasks[action.payload];\r\n      const new_task = Object.assign({}, task, {\r\n        finished: true,\r\n        closed: true,\r\n      });\r\n      state.tasks[action.payload] = new_task;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { addTask, removeTask, toggleTask, addComment, setFinished } =\r\n  tasksSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const getTasksIds = (state: RootState) =>\r\n  Object.keys(state.tasks.tasks).sort(\r\n    (a, b) => state.tasks.tasks[a].priority - state.tasks.tasks[b].priority\r\n  );\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const getTasks = (state: RootState) => state.tasks.tasks;\r\n\r\nexport default tasksSlice.reducer;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nexport const useStyles = makeStyles({\r\n  task: {\r\n    minWidth: 400,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  text: {\r\n    minWidth: 156,\r\n  },\r\n  btn: {\r\n    marginRight: 10,\r\n  },\r\n  row: {\r\n    background: red[100],\r\n  },\r\n});\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nexport const useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n  leave_comment: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-end\",\r\n    width: \"100%\",\r\n  },\r\n  list: {\r\n    width: \"90%\",\r\n    position: \"relative\",\r\n    left: 50,\r\n  },\r\n  item: {\r\n    fontSize: 10,\r\n    padding: 5,\r\n  },\r\n  comment: {\r\n    flexGrow: 1,\r\n    fontSize: 10,\r\n  },\r\n});\r\n","import { ListItem } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useStyles } from \"./styles\";\r\nimport { useState } from \"react\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { addComment } from \"../../store/tasksSlice\";\r\n\r\ntype Props = {\r\n  comments: string[];\r\n  id: string;\r\n};\r\n\r\nexport const Comments: React.FC<Props> = ({ comments, id }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [show, setShow] = useState(false);\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClick = () => {\r\n    dispatch(addComment({ id, comment: value }));\r\n    setValue(\"\");\r\n    setShow(false);\r\n  };\r\n  return (\r\n    <List className={classes.list}>\r\n      {comments.map((comment, i) => (\r\n        <ListItem className={classes.item} key={i}>\r\n          <ListItemAvatar>\r\n            <Avatar className={classes.avatar}>\r\n              <PersonIcon fontSize=\"small\" />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText secondary={comment} />\r\n        </ListItem>\r\n      ))}\r\n      {show ? (\r\n        <ListItem className={classes.leave_comment}>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Комментарий\"\r\n            type=\"text\"\r\n            className={classes.comment}\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n          />\r\n          <Button\r\n            onClick={handleClick}\r\n            color=\"primary\"\r\n            disabled={value.length === 0}\r\n          >\r\n            Отправить\r\n          </Button>\r\n        </ListItem>\r\n      ) : (\r\n        <Button\r\n          variant=\"text\"\r\n          size=\"small\"\r\n          style={{ marginLeft: 55 }}\r\n          onClick={() => setShow(true)}\r\n        >\r\n          Добавить комментарий\r\n        </Button>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n","import ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport {\r\n  removeTask,\r\n  getTasks,\r\n  toggleTask,\r\n  setFinished,\r\n} from \"../../store/tasksSlice\";\r\nimport { useStyles } from \"./styles\";\r\nimport { Task } from \"../../Props\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport { Comments } from \"../Comments\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\ntype Props = {\r\n  id: string;\r\n};\r\n\r\nconst priority = [\"Критичный\", \"Высокий\", \"Средний\", \"Низкий\"];\r\n\r\nexport const UserTask: React.FC<Props> = ({ id }) => {\r\n  const classes = useStyles();\r\n  const tasks = useAppSelector(getTasks);\r\n  const task: Task = tasks[id];\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleClick = () => dispatch(toggleTask(id));\r\n  const handleFinish = () => dispatch(setFinished(id));\r\n\r\n  return (\r\n    <ListItem className={classes.task}>\r\n      <Box\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        bgcolor={task.finished ? red[100] : \"transparent\"}\r\n      >\r\n        <IconButton onClick={handleClick} className={classes.btn}>\r\n          {task.closed ? <KeyboardArrowRightIcon /> : <KeyboardArrowDownIcon />}\r\n        </IconButton>\r\n        <ListItemText primary={task.task} className={classes.text} />\r\n        <ListItemText primary={task.date} className={classes.text} />\r\n        <ListItemText\r\n          primary={priority[task.priority]}\r\n          className={classes.text}\r\n        />\r\n        <ListItemText\r\n          primary={task.finished ? \"Закрыто\" : \"Открыто\"}\r\n          className={classes.text}\r\n        />\r\n\r\n        <Button\r\n          variant=\"text\"\r\n          color=\"primary\"\r\n          onClick={handleFinish}\r\n          disabled={task.finished}\r\n        >\r\n          Завершить\r\n        </Button>\r\n      </Box>\r\n      {!task.closed && <Comments comments={task.comments} id={task.id} />}\r\n    </ListItem>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n  tasks: {\r\n    marginTop: 100,\r\n    overflow: \"auto\",\r\n    maxHeight: 550,\r\n  },\r\n});\r\n","import { UserTask } from \"../UserTask\";\r\nimport { useAppSelector } from \"../../hooks\";\r\nimport { getTasksIds } from \"../../store/tasksSlice\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { useStyles } from \"./styles\";\r\n\r\nexport const Tasks = () => {\r\n  const classes = useStyles();\r\n  const tasks = useAppSelector(getTasksIds);\r\n\r\n  return (\r\n    <List className={classes.tasks}>\r\n      {tasks.map((id) => (\r\n        <UserTask id={id} key={id} />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nexport const useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n  text: {\r\n    minWidth: 400,\r\n    margin: 20,\r\n    marginBottom: 0,\r\n    marginTop: 0,\r\n  },\r\n  btn: {\r\n    margin: 20,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { addTask } from \"../../store/tasksSlice\";\r\nimport { useStyles } from \"./styles\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { MenuItem, InputLabel, FormControl } from \"@material-ui/core\";\r\n\r\nexport interface SimpleDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nconst priority = [\"Критичный\", \"Высокий\", \"Средний\", \"Низкий\"];\r\n\r\nfunction SimpleDialog(props: SimpleDialogProps) {\r\n  const dispatch = useAppDispatch();\r\n  const classes = useStyles();\r\n  const { onClose, open } = props;\r\n  const [value, setValue] = useState(\"\");\r\n  const [prt, setPriority] = useState(0);\r\n\r\n  const handleClose = () => {\r\n    dispatch(addTask({ task: value, priority: prt }));\r\n    setValue(\"\");\r\n    setPriority(0);\r\n    onClose();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setValue(\"\");\r\n    onClose();\r\n    setPriority(0);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleCancel}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <DialogTitle id=\"simple-dialog-title\">Добавление задачи</DialogTitle>\r\n      <TextField\r\n        onChange={(e) => setValue(e.target.value)}\r\n        variant=\"outlined\"\r\n        className={classes.text}\r\n        value={value}\r\n      />\r\n\r\n      <FormControl className={classes.text} style={{ marginTop: 10 }}>\r\n        <InputLabel id=\"demo-simple-select-label\">Приоритет</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          value={prt}\r\n          onChange={(e: any) => setPriority(e.target.value)}\r\n        >\r\n          {priority.map((item, i) => (\r\n            <MenuItem value={i} key={i}>\r\n              {item}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <Button\r\n        color={\"primary\"}\r\n        variant=\"outlined\"\r\n        className={classes.btn}\r\n        onClick={handleClose}\r\n        disabled={value.length === 0}\r\n      >\r\n        Добавить задачу\r\n      </Button>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport const AddDialog = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Добавить задачу\r\n      </Button>\r\n      <SimpleDialog open={open} onClose={handleClose} />\r\n    </Box>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport { Tasks } from \"../Tasks\";\r\nimport { AddDialog } from \"../AddDialog\";\r\n\r\nexport const App = () => (\r\n  <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n    <Tasks />\r\n    <AddDialog />\r\n  </Box>\r\n);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./tasksSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}